README.kincontours                                    JMW - Feb 14, 2003

NEW - (Feb 2003) kin3Dcont can clip the output to a box around a given point
                 with the -clip flag.

NEW - (Aug 2002) kin3Dcont can read xplor ascii map files with -xplor
                 flag; you can now specify levels by standard deviations
		 from the mean with the -slevel and -smulti flags;
		 the new -align flag is useful if you want to force a
		 non-wrapped grid of samples to the grid intersections.

The programs kin2Dcont and kin3Dcont produce contour plots from tables
of values and their 2-D or 3-D coordinates. If the data is scattered
is space, the programs can smooth it and produce what is essentially
a histogram in two or three dimensions. Evenly sampled data values can
also be contoured, as well as data which is periodic, for example when
the dimensions are angles with 360 deg the same as 0 deg.

Both kin2Dcont and kin3Dcont are 'c' programs, designed for use in
a UNIX or LINUX environment. They should be easy to port to various
operating systems. The heart of the code is software based directly
on the "contour tree" algorithm by Michael J. Zyda [1]. This has been
extended with procedures to produce connected contours sorted by
the contour level. Vector and Matrix creation routines were taken
from Numerical Recipes [2].

USAGE
Here is an example of using one of the contour routines:

  kin3Dcont -g1.5 -s3 -l 2.5 sea atom.data >> atomcont.kin

It reads data in the file "atom.data" and generates a single 3D
contour with a grid spacing of 1.5 and a filter stddev of 3. Only
one contour level will be drawn (at 2.5, see "-l" below).

Input from atom.data is a series of "value, x, y, [z]" entries,
each on a separate line. If the value comes after the coordinates
(i.e.: x, y, val) use the -last flag. It is this value information
which is being contoured.

The output is in kinemage format (kin2Dcont can produce PostScript
output as an alternative). The programs write to standard output
and can be appended to an existing kinemage file with the ">>"
redirection symbol.

The flag "-l" (the letter L, not the number one) precedes a set of
level number, color name pairs. The color names should be kinemage
colors: red, green, blue, cyan, yellow, magenta, white, pink, orange
purple, sky, brown, gray, black, gold, yellowtint, sea, pinktint,
bluetint, greentint, hotpink. A range of contour levels for a given
color can be given with the "-m" flag. The flags "-sl" and "-sm"
are similar except that the levels are specified in terms of standard
deviations.

The grid spacing (-g#.#) specifies how finely space is sliced to
make the contours. The size of the output will increase with the
square or cube as the grid spacing is made smaller. For data
represented at atoms, a grid spacing of 1 Angstrom is about as high
as is necessary. (NOTE: Kin3Dcont will automically read the grid
spacing from a map header.)

The spot function (-s#.#) controls the smoothing. The value is
the standard deviation of a gaussian filter and a bigger spot
function smoothes more. For scattered data, a -s often works well
at a size of twice -g. For uniformly sampled data, -s is often
best at the same size as -g.

Uniformly sampled data is often generated by sampling programs.
For example, the following command creates a series of contours
from score data that was sampled every 5 degrees for the chi1
and chi2 angles of a tyrosine sidechain.
   kin2Dcont 1ah7y61.scores -kin -group -sampled -wrap 0 360 0 180 \
   -g5 -s5 -m -200 -20 20 orange \
   -l 0 grey -m 2 50 2 sea > 1ah7y61.cont.kin
The "-sampled" flag says the data is uniformly sampled. In addition,
this data has periodic boundaries since 360 deg is the same as 0 deg.
Periodic boundaries are setup with the "-wrap" flag. If a data sample
is missing, it is as if a zero was entered for the value.

An alternative for uniformly sampled data which does not wrap is to
use the -alignminxyz flag. It forces the data point with the lowest
x, y, and z values sit on a grid point and automically sets the
-snaptogrid and -sampled properties to force the data on to the grid.

With randomly sampled data, each point in the input file can be
thought of as contributing to the space being contoured in little
piles. The piles are heaped into gaussian shapes as defined by
the spot function. If multiple samples are at the same coordinate,
they add and the pile grows. For many purposes, the 'value' for
randomly sampled data is simply 1.0 and the result is a smoothed
histogram of sample counts. In the following,
  kin3Dcont -last -s0.8 -g0.5 -l 0.04 sea 0.08 sky atoms.txt >> atomhis.kin
the file atoms.txt contains lines of the form: x, y, z, 1.0
43.958  -5.980 -27.758  1.00           N  
44.718  -5.054 -26.911  1.00           C  
44.069  -4.848 -25.543  1.00           C  
...
(Trailing text after the coordinates and value is ignored. The
flag "-last" is required because the value comes after the coords.)

The "-dump" flag enables one to bypass the contouring routines while
taking advantage of the integration and smoothing routines. No matter
how the data was input, the output will be gridpoint samples. This
information is ready to be post-processed in other programs.

The "-kin" and "-group" flags used in the last example add the
commands @kinemage and @group to the kinemage file, allowing it
to operate as a stand alone kinemage. Other useful keywords for
controlling the kinemage layout are: -name, -noaxis, -flat and -lens.

The commands "kin2Dcont -help" and "kin3Dcont -help" will display
a description of the command line options for these programs.

MAPS

Kin3Dcont can now read and process ascii format electron density maps 
in XPLOR format. The grid spacing is read from the map header and so
you don't need to use the -g flag. Also, the default smoothing is
almost certainly too great; try using -nosomoth. The levels can be set
in absolute values but can now be set in terms of standard deviations
from the mean with either -sl or -sm. Finally, the -align flag will
force the sample points to be aligned with the grid used by kin3Dcont
(well, if the unit cell axes are orthogonal). Here is an example:

  kin3Dcont -v -kin -group -name "1abc 2fo-fc" -xplor -align -nosmooth \
            -slev 2 sky 1abc.2fo-fc.txt > 1abc.2fo-fc.kin

PLANS

A future version may permit the variation of the spot function such
that different points have different amounts of smoothing.

TROUBLESHOOTING

If you don't have kin2Dcont and kin3Dcont or if you have an old copy,
you can get the latest release from ftp://kinemage.biochem.duke.edu;
binary executable files are available for several operating systems
along with source code. Make sure you download .exe or .tar files as
BINARY. If you download the .exe files, you will probably wish to rename
them to just "kin2Dcont" and "kin3Dcont". Put them into a directory which
is listed in your PATH environmental variable. For UNIX or LINUX you
will also have to make them executable with the command:
        chmod +x kin2Dcont kin3Dcont

The source code should compile easily on almost all UNIX like systems.
Check the "makefile" for any system specific issues and then type
        make kin2Dcont kin3Dcont

REFERENCES

[1] A Decomposable Algorithm for Contour Surface Display Generation,
    Michael J. Zyda, ACM Transactions on Graphics, Vol. 7, No. 2,
    April 1988, Pages 129-148.

[2] Numerical Recipes in C, 2nd ed, Press, Teukolsky, Vetterling,
    and Flannery, 1992, Cambridge University Press.

CONTACTS

We hope this helps you get started working with contours. To find the
latest version of kin2Dcont and kin3Dcont, see
   http://kinemage.biochem.duke.edu.

Mike Word
mike.word@duke.edu

Biochemistry Department
Duke University
Durham, NC USA 27710
